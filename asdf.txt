  
                                         
  
                                         
                                         
                                         
                                         
                                         
                                         
  
                                         
  
                                     
                                                 
  
                                                                        
                                                                        
                                                                     
                                       
  
                                                                   
                                                                  
                                                                 
                                                
  
                                                                     
                                                                         
   

#include <stdio.h>
#include <moss/array.h>
#include <mstest.h>

#include "             "
#include "                 "

   
                                                                 
                                              
                                                                                                                
                                                                                                    
                               
   
typedef struct MSSTST_ARRAY_DATA
{
	MS_ARRAY *Pointer1;                                                   
	MS_ARRAY *Pointer2;                                                           
	MS_ARRAY  Local1;                                        
	MS_ARRAY  Local2;                                                
}
MSTST_ARRAY_DATA;

                                               
const int LIST[] =
{
	313, 392, 403, 283, 413, 431, 463, 450, 378, 506, 384, 477, 289, 376, 346, 296, 311, 465, 436, 434, 312,
	299, 371, 482, 402, 325, 263, 448, 491, 381, 308, 512, 342, 280, 290, 417, 305, 359, 336, 498, 363, 326,
	368, 508, 279, 453, 318, 406, 271, 319, 293, 354, 374, 323, 459, 454, 507, 467, 440, 292, 470, 306, 409,
	270, 488, 393, 341, 257, 358, 416, 284, 343, 473, 495, 266, 464, 383, 460, 361, 380, 432, 304, 439, 369,
	339, 273, 348, 286, 404, 499, 272, 394, 423, 476, 382, 487, 469, 309, 366, 489, 405, 501, 267, 377, 301,
	397, 462, 412, 461, 347, 320, 474, 269, 294, 276, 445, 370, 388, 492, 430, 437, 481, 315, 387, 365, 256,
	421, 446, 410, 332, 471, 395, 265, 324, 504, 355, 295, 303, 335, 468, 351, 505, 420, 386, 458, 372, 281,
	285, 373, 344, 400, 274, 379, 398, 298, 364, 277, 327, 411, 475, 331, 362, 494, 316, 428, 288, 291, 422,
	391, 457, 287, 300, 338, 390, 389, 350, 456, 407, 356, 375, 441, 401, 333, 275, 502, 509, 511, 349, 337,
	490, 424, 414, 435, 282, 451, 496, 353, 260, 317, 314, 352, 329, 418, 302, 340, 345, 442, 447, 321, 486,
	357, 478, 503, 500, 307, 310, 367, 297, 278, 264, 268, 425, 360, 429, 443, 419, 322, 426, 497, 484, 427,
	466, 433, 334, 479, 483, 261, 455, 510, 444, 262, 415, 449, 452, 472, 328, 493, 396, 399, 259, 438, 330,
	385, 480, 258, 485
};

   
                                             
                                                                       
   
void mst_array_teardown( MST_SUITE *suite )
{
	MSTST_ARRAY_DATA *data;

	if( !suite->Data )
		return;

	data = suite->Data;

	ms_array_free( data->Pointer1 );
	data->Pointer1 = NULL;

	ms_array_free( data->Pointer2 );
	data->Pointer2 = NULL;

	ms_array_free( &data->Local1 );
	ms_array_free( &data->Local2 );
}

  
                                                                                                                      
                                                                                                                  
                               
                                                                                                                  
                                                                                                                      
  

   
                                                      
                                                                               
                                                             
                                                                    
   
int mst_array_create( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;
	int               ercode = 0;

	mst_prepare( info );
	data = info->Data;

	                               
	data->Pointer1 = ms_array_alloc( sizeof(long double), 2 );
	data->Local1   = ms_array_return_local( sizeof(long double), 2 );

	                   
	ercode = ms_array_init( &data->Local2, sizeof(long double), 2 );
	mst_assert( ercode == MSEC_OK );

	                                           
                                                                             
                                       
	data->Pointer2 = ms_array_alloc( sizeof(long double), 0 );

	mst_assert( data->Pointer1 );
	mst_assert( data->Pointer1->Items );
	mst_assert( data->Pointer2 );
	mst_assert( data->Pointer2->Items );
	mst_assert( data->Local1.Items );
	mst_assert( data->Local2.Items );
	
	                                                                       
	mst_assert(  data->Pointer1->Destroy );
	mst_assert(  data->Pointer2->Destroy );
	mst_assert( !data->Local1.Destroy );
	mst_assert( !data->Local2.Destroy );

	                                                   
	mst_assert_uint( data->Pointer1->Capacity, ==, 2 );
	mst_assert_uint( data->Pointer2->Capacity, ==, MSD_ARRAY_DEFAULT_SIZE );
	mst_assert_uint( data->Local1.Capacity,    ==, 2 );
	mst_assert_uint( data->Local2.Capacity,    ==, 2 );

	                                                               
	mst_assert_uint( data->Pointer1->Length, ==, 0 );
	mst_assert_uint( data->Pointer2->Length, ==, 0 );
	mst_assert_uint( data->Local1.Length,    ==, 0 );
	mst_assert_uint( data->Local2.Length,    ==, 0 );

	                                                                      
	mst_assert_uint( data->Pointer1->ItemSize, ==, sizeof(long double) );
	mst_assert_uint( data->Pointer2->ItemSize, ==, sizeof(long double) );
	mst_assert_uint( data->Local1.ItemSize,    ==, sizeof(long double) );
	mst_assert_uint( data->Local2.ItemSize,    ==, sizeof(long double) );

	                                                        
	mst_assert( data->Pointer1->FuncIncrease == MSC_ArrayFunctions.IncMultiply );
	mst_assert( data->Pointer2->FuncIncrease == MSC_ArrayFunctions.IncMultiply );
	mst_assert( data->Local1.FuncIncrease    == MSC_ArrayFunctions.IncMultiply );
	mst_assert( data->Local2.FuncIncrease    == MSC_ArrayFunctions.IncMultiply );

	                             
	mst_assert_float( data->Pointer1->Modifier, ==, 2.f );
	mst_assert_float( data->Pointer2->Modifier, ==, 2.f );
	mst_assert_float( data->Local1.Modifier,    ==, 2.f );
	mst_assert_float( data->Local2.Modifier,    ==, 2.f );

	return MSEC_OK;
}

   
                                            
                                                                                              
                                                                                                   
   
int mst_array_destroy( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	mst_prepare( info );
	data = info->Data;

	mst_assert( data->Pointer1 );
	mst_assert( data->Pointer1->Items );
	mst_assert( data->Local2.Items );
	mst_assert( data->Local1.Items );

	                                                    
	ms_array_clear( &data->Local1 );
	mst_assert( data->Local1.Items );
	mst_assert_uint( data->Local1.Length, ==, 0 );

	ms_array_free( &data->Local1 );
	mst_assert( !data->Local1.Items );

	                                                 
	ms_array_free( data->Pointer1 );
	ms_array_free( data->Pointer2 );
	                                                          

	ms_array_free( &data->Local2 );
	mst_assert( !data->Local2.Items );
	mst_assert( !data->Local2.Destroy );

	mst_assert_uint( data->Local2.Capacity, ==, 0 );
	mst_assert_uint( data->Local2.Length,   ==, 0 );
	mst_assert_uint( data->Local2.ItemSize, ==, 0 );

	data->Pointer1 = NULL;
	data->Pointer2 = NULL;

	                                                       
	ms_array_free( data->Pointer1 );

	return MSEC_OK;
}

  
                                                                                                                      
                                                                                                                  
                   
                                                                                                                  
                                                                                                                      
  

   
                                          
                                                                                 
                                                                                                              
   
int mst_array_realloc( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;
	int               ercode;
	MS_ARRAY         *array;

	mst_prepare( info );
	data = info->Data;
	mst_assert( !data->Local1.Items );

	ercode = ms_array_init( &data->Local1, sizeof(int), 2 );
	array  = &data->Local1;
	mst_assert( ercode == MSEC_OK );

	array->FuncIncrease = MSC_ArrayFunctions.IncPower;
	array->Modifier     = 1.1f;

	                                            
                                                             
	ercode = ms_array_realloc( array, 0 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 3 );

	                                                                                   
	array->Modifier = 2.57f;
	ercode = ms_array_realloc( array, 0 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 16 );

	array->FuncIncrease = MSC_ArrayFunctions.IncMultiply;
	array->Modifier     = 2.f;

	               
	ercode = ms_array_realloc( array, 0 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 32 );

	               
	array->FuncIncrease = MSC_ArrayFunctions.IncAdd;
	ercode = ms_array_realloc( array, 0 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 34 );

	                                                                                                      
	ercode = ms_array_realloc( array, 15 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 15 );

	                                                                           
                                                                                  
	array->Length = 8;
	ercode = ms_array_realloc( array, 7 );
	mst_assert( ercode == MSEC_DATA_OVERFLOW );
	mst_assert_uint( array->Capacity, ==, 15 );

	                                                                                       
	ercode = ms_array_realloc( array, 8 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 8 );

	                                                                   
                                                                       
	array->FuncIncrease = NULL;
	ercode = ms_array_realloc( array, 0 );
	mst_assert( ercode == MSEC_INVALID_VALUE );
	mst_assert_uint( array->Capacity, ==, 8 );

	                   
	array->Length = 0;
	ercode = ms_array_realloc( array, 2 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 2 );

	return MSEC_OK;
}

   
                                                                          
                                                                                
                                                                                                  
                                                                                                   
   
int mst_array_realloc_min( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;
	int               ercode;
	MS_ARRAY         *array;

	mst_prepare( info );
	data = info->Data;

	mst_assert( data->Local1.Items );
	array = &data->Local1;

	                                                               
	array->FuncIncrease = MSC_ArrayFunctions.IncPower;
	array->Modifier     = 1.1f;

	ercode = ms_array_realloc_min( array, 3 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 3 );

	                                                                                                   
	array->Modifier = 1.5f;
	ercode = ms_array_realloc_min( array, 20 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 36 );

	                                                                                                           
                                                                                     
	ercode = ms_array_realloc_min( array, 20 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 36 );

	                                                                                 
	array->FuncIncrease = NULL;
	ercode = ms_array_realloc_min( array, 256 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                      
	ercode = ms_array_realloc( array, 2 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Capacity, ==, 2 );

	return MSEC_OK;
}

  
                                                                                                                      
                                                                                                                  
                     
                                                                                                                  
                                                                                                                      
  

   
                                                 
                                                                                    
                                                                                   
   
int mst_array_insert_value( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;
	int               ercode, number;
	MS_ARRAY         *array;

	mst_prepare( info );
	data = info->Data;

	mst_assert( data->Local1.Items );
	array = &data->Local1;

	                                                                      
	array->FuncIncrease = NULL;

	                            
	ercode = ms_array_push_value( array, &LIST[0] );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 1 );
	mst_assert_uint( array->Capacity, ==, 2 );

	                         
	ercode = ms_array_push_value( array, &LIST[1] ); 
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 2 );
	mst_assert_uint( array->Capacity, ==, 2 );

	                                                                              
	ercode = ms_array_push_value( array, &LIST[2] ); 
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 3 );
	mst_assert_uint( array->Capacity, ==, 3 );

	                                        
	ercode = ms_array_insert_value( array, 6, &LIST[3] );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array->Length,   ==, 3 );
	mst_assert_uint( array->Capacity, ==, 3 );

	                                               
	ercode = ms_array_insert_value( array, 1, &LIST[3] );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 4 );
	mst_assert_uint( array->Capacity, ==, 4 );

	                                                         
                                                                                             
	number = ms_array_getl( data->Local1, int, 0 );
	mst_assert_sint( number, ==, LIST[0] );
	number = ms_array_getl( data->Local1, int, 1 );
	mst_assert_sint( number, ==, LIST[3] );
	number = ms_array_getl( data->Local1, int, 2 );
	mst_assert_sint( number, ==, LIST[1] );
	number = ms_array_getl( data->Local1, int, 3 );
	mst_assert_sint( number, ==, LIST[2] );

	return MSEC_OK;
}

   
                                                   
                                                                   
                                                                                     
                                                                                                 
   
int mst_array_insert_values( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;
	MS_ARRAY         *array;

	size_t x, y;
	int    ercode, *items;

	mst_prepare( info );
	data = info->Data;
	mst_assert( !data->Local2.Items );

	data->Local2 = ms_array_return_local( sizeof(int), 2 );
	mst_assert( data->Local2.Items );
	array = &data->Local2;

	                           
                                                                       
	ercode = ms_array_push_values( array, LIST, 192 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 192 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                           
	ercode = ms_array_insert_values( array, 64, &LIST[192], 32 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 224 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                   
	ercode = ms_array_push_values( array, LIST, 0 );
	mst_assert( ercode == MSEC_INVALID_ARGUMENT );
	mst_assert_uint( array->Length,   ==, 224 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                             
	ercode = ms_array_insert_values( array, 0, &LIST[224], 32 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 256 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                  
	ercode = ms_array_insert_values( array, 512, LIST, 32 );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array->Length,   ==, 256 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                  
	items = (int*)array->Items;
	for( y = 224, x = 0; x < 32; ++y, ++x )
		mst_assert_sint( items[x], ==, LIST[y] );
	for( y = 0; y < 64; ++x, ++y )
		mst_assert_sint( items[x], ==, LIST[y] );
	for( y = 192; y < 224; ++x, ++y )
		mst_assert_sint( items[x], ==, LIST[y] );
	for( y = 64; y < 192; ++x, ++y )
		mst_assert_sint( items[x], ==, LIST[y] );

	return MSEC_OK;
}

   
                                      
                                                                                                    
                                                                      
                                                                            
   
int mst_array_join_slice( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	size_t    x, y;
	int       ercode, *items1, *items2;
	MS_ARRAY *array1, *array2, *array3;

	mst_prepare( info );
	data = info->Data;

	mst_assert(  data->Local2.Items );
	mst_assert( !data->Pointer1 );
	mst_assert( !data->Pointer2 );
	array1 = &data->Local2;

	array2 = data->Pointer1 = ms_array_alloc( array1->ItemSize, 64 );
	mst_assert( array2->Items );

	array3 = data->Pointer2 = ms_array_alloc( array1->ItemSize * 2, 64 );
	mst_assert( array3->Items );

	                                                                 
                                                  
	ercode = ms_array_join_slice( array2, array1, 64, 64 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array2->Length,   ==, 64 );
	mst_assert_uint( array2->Capacity, ==, 64 );

	                                                           
	ercode = ms_array_join_slice( array2, array1, 192, 0 );
	mst_assert( ercode == MSEC_OK );

	mst_assert_uint( array2->Length,   ==, 128 );
	mst_assert_uint( array2->Capacity, ==, 128 );

	                                   
	ercode = ms_array_join_slice( array2, array1, 192, 256 );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array2->Length,   ==, 128 );
	mst_assert_uint( array2->Capacity, ==, 128 );

	                                                                            
	ercode = ms_array_join( array3, array2 );
	mst_assert( ercode == MSEC_INVALID_ARGUMENT );
	mst_assert_uint( array3->Length,   ==, 0 );
	mst_assert_uint( array3->Capacity, ==, 64 );

	                                                             
	items2 = (int*)array2->Items;
	items1 = (int*)array1->Items;
	for( x = 0, y = 64; y < 128; ++x, ++y )
		mst_assert_sint( items2[x], ==, items1[y] );
	for( y = 192; y < 256; ++x, ++y )
		mst_assert_sint( items2[x], ==, items1[y] );

	return MSEC_OK;
}

   
                                            
                                                                                                        
                                                                                                               
                              
                                                                                      
   
int mst_array_join_slice_inverse( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	size_t    x, y;
	int       ercode, *items1, *items2;
	MS_ARRAY *array1, *array2, *array3;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Local2.Items );
	mst_assert( data->Pointer1 );
	mst_assert( data->Pointer2 );
	array1 = &data->Local2;

	                                              
                                                                
	array2 = data->Pointer1;
	ms_array_clear( array2 );
	mst_assert( array2->Items );
	mst_assert( array2->Destroy );

	mst_assert_uint( array2->ItemSize, ==, sizeof(int) );
	mst_assert_uint( array2->Length,   ==, 0 );
	mst_assert_uint( array2->Capacity, ==, 128 );

	array3 = data->Pointer2;
	mst_assert_uint( array3->ItemSize, ==, sizeof(int) * 2 );

	                                                                        
	ercode = ms_array_join_slice_inverse( array2, array1, 64, 128 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array2->Length,   ==, 128 );
	mst_assert_uint( array2->Capacity, ==, 128 );

	                                                                 
	ercode = ms_array_join_slice_inverse( array2, array1, 64, 256 );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array2->Length,   ==, 128 );
	mst_assert_uint( array2->Capacity, ==, 128 );

	                                                    
	ercode = ms_array_join_slice_inverse( array2, array1, 128, 0 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array2->Length,   ==, 256 );
	mst_assert_uint( array2->Capacity, ==, 256 );

	                                                                            
	ercode = ms_array_join_slice_inverse( array3, array2, 128, 64 );
	mst_assert( ercode == MSEC_INVALID_ARGUMENT );
	mst_assert_uint( array3->Length,   ==, 0 );
	mst_assert_uint( array3->Capacity, ==, 64 );

	                                                             
	items1 = (int*)array1->Items;
	items2 = (int*)array2->Items;
	for( x = 0, y = 0; y < 64; ++x, ++y )
		mst_assert_sint( items2[x], ==, items1[y] );
	for( y = 192; y < 256; ++x, ++y )
		mst_assert_sint( items2[x], ==, items1[y] );
	for( y = 0; y < 128; ++x, ++y )
		mst_assert_sint( items2[x], ==, items1[y] );

	return MSEC_OK;
}

  
                                                                                                                      
                                                                                                                  
                   
                                                                                                                  
                                                                                                                      
  

   
                                      
                                                                                          
                                                                                                     
   
int mst_array_copy( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	size_t    iter;
	int       ercode;
	MS_ARRAY *array1, *array2, *array3;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Local2.Items );
	mst_assert( data->Local1.Items );
	mst_assert( data->Pointer2 );

	array1 = &data->Local2;
	array2 = &data->Local1;

	                       
	ms_array_free( array2 );
	mst_assert( !array2->Items );

	                      
	ercode = ms_array_copy( array2, array1 );
	mst_assert( ercode == MSEC_OK );

	                                                                                    
	mst_assert_uint( array1->Capacity, ==, array2->Capacity );
	mst_assert_uint( array1->Length,   ==, array2->Length );

	mst_assert( array1->Destroy == array2->Destroy );
	mst_assert( array1->Items != array2->Items );

	                                          
	for( iter = 0; iter < array1->Length; ++iter )
		mst_assert_uint( ms_array_get(array1, int, iter), ==, ms_array_get(array2, int, iter) );

	                                                                                                 
	ms_array_free( data->Pointer2 );

	                                                          
	array3 = data->Pointer2 = ms_array_copy_alloc( array1 );

	                                                                   
	mst_assert( array3 );
	mst_assert_uint( array2->Capacity, ==, array3->Capacity );
	mst_assert_uint( array2->Length,   ==, array3->Length );

	                                                                                  
                                                                                    
	mst_assert( array2->Destroy != array3->Destroy );
	mst_assert( array2->Items != array3->Items );

	                                          
	for( iter = 0; iter < array2->Length; ++iter )
		mst_assert_sint( ms_array_get(array2, int, iter), ==, ms_array_get(array3, int, iter) );

	return MSEC_OK;
}

  
                                                                                                                      
                                                                                                                  
                    
                                                                                                                  
                                                                                                                      
  

   
                                                                             
                                                                              
                                                                                               
   
int mst_array_slice( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	size_t    x, y;
	int       ercode;
	MS_ARRAY *array;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Pointer2 );
	mst_assert( data->Pointer2->Items );
	mst_assert( data->Local2.Items );
	array = data->Pointer2;

	                                                                     
	ercode = ms_array_slice( array, 32, 128 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 128 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                           
	for( x = 0, y = 32; x < 128; ++y, ++x )
		mst_assert_sint( ms_array_get(array, int, x), ==, ms_array_getl(data->Local2, int, y) );

	                                                         
	ercode = ms_array_slice( array, 32, 128 );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array->Length,   ==, 128 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                    
	ercode = ms_array_slice( array, 64, 0 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 64 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                                            
	for( x = 0, y = 96; x < 64; ++y, ++x )
		mst_assert_sint( ms_array_get(array, int, x), ==, ms_array_getl(data->Local2, int, y) );

	                                                                               
	ercode = ms_array_slice( array, 0, 32 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 32 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                                                                   
	for( x = 0, y = 96; x < 32; ++y, ++x )
		mst_assert_sint( ms_array_get(array, int, x), ==, ms_array_getl(data->Local2, int, y) );

	                                                                                 
	ms_array_clear( array );
	mst_assert_uint( array->Length, ==, 0 );
	mst_assert( array->Items );

	                                      
	ercode = ms_array_slice( array, 32, 128 );
	mst_assert( ercode == MSEC_INVALID_ARGUMENT );
	mst_assert_uint( array->Length,   ==, 0 );
	mst_assert_uint( array->Capacity, ==, 256 );

	return MSEC_OK;
}

   
                                                       
                                                                  
                                            
   
int mst_array_remove_range( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	size_t    x, y;
	int       ercode;
	MS_ARRAY *array;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Local1.Items );
	mst_assert( data->Local2.Items );
	array = &data->Local1;

	                                         
	ercode = ms_array_remove_range( array, 64, 64 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 192 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                           
	for( x = 0, y = 0; x < 64; ++y, ++x )
		mst_assert_sint( ms_array_get(array, int, x), ==, ms_array_getl(data->Local2, int, y) );
	for( y = 128; y < 256; ++y, ++x )
		mst_assert_sint( ms_array_get(array, int, x), ==, ms_array_getl(data->Local2, int, y) );

	                                                                
	ercode = ms_array_remove_range( array, 128, 0 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 128 );
	mst_assert_uint( array->Capacity, ==, 256 );

	                                    
	ercode = ms_array_remove_range( array, 128, 128 );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array->Length,   ==, 128 );
	mst_assert_uint( array->Capacity, ==, 256 );

	               
	ms_array_clear( array );
	mst_assert_uint( array->Length, ==, 0 );
	mst_assert( array->Items );

	                                 
	ercode = ms_array_remove_range( array, 0, 5 );
	mst_assert( ercode == MSEC_INVALID_ARGUMENT );
	mst_assert_uint( array->Length,   ==, 0 );
	mst_assert_uint( array->Capacity, ==, 256 );

	return MSEC_OK;
}

   
                                                     
                                                                                                    
                                                                                                         
   
int mst_array_remove( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	int       ercode;
	MS_ARRAY *array1, *array2;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Pointer1 );
	mst_assert( data->Pointer2 );
	mst_assert( data->Pointer1->Items );
	mst_assert( data->Pointer2->Items );
	mst_assert_uint( data->Pointer1->Capacity, ==, 256 );
	array1 = data->Pointer1;

	ms_array_free( data->Pointer2 );

	                                                               
	data->Pointer2 = ms_array_copy_alloc( data->Pointer1 );
	mst_assert( data->Pointer2 );
	mst_assert( data->Pointer2->Items );
	array2 = data->Pointer2;

	                                                                                                 
	mst_assert_sint( ms_array_get(array1, int, 64), ==, ms_array_get(array2, int, 64) );

	                           
	ercode = ms_array_remove_last( array1 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array1->Length,   ==, 255 );
	mst_assert_uint( array1->Capacity, ==, 256 );

	                                                                        
	mst_assert_sint( ms_array_get(array1, int, 64), ==, ms_array_get(array2, int, 64) );

	                              
	ercode = ms_array_remove( array1, 64 );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array1->Length,   ==, 254 );
	mst_assert_uint( array1->Capacity, ==, 256 );

	                                                      
	mst_assert_sint( ms_array_get(array1, int, 64), !=, ms_array_get(array2, int, 64) );
	mst_assert_sint( ms_array_get(array1, int, 64), ==, ms_array_get(array2, int, 65) );

	                                    
	ercode = ms_array_remove( array1, 255 );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array1->Length,   ==, 254 );
	mst_assert_uint( array1->Capacity, ==, 256 );

	                        
	ms_array_clear( array1 );
	mst_assert( array1->Items );
	mst_assert_uint( array1->Length,   ==, 0 );
	mst_assert_uint( array1->Capacity, ==, 256 );

	                                       
	ercode = ms_array_remove( array1, 255 );
	mst_assert( ercode == MSEC_INVALID_ARGUMENT );
	mst_assert_uint( array1->Length,   ==, 0 );
	mst_assert_uint( array1->Capacity, ==, 256 );

	return MSEC_OK;
}

  
                                                                                                                      
                                                                                                                  
                       
                                                                                                                  
                                                                                                                      
  

   
                                           
                                                            
                                                                                                           
   
int mst_array_base_return( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Local1.Items );

	                
	ms_array_free( &data->Local1 );
	mst_assert( !data->Local1.Items );

	data->Local1 = ms_array_return( 2 );
	mst_assert( data->Local1.Items );

	                                       
	mst_assert( !data->Local1.Destroy );
	mst_assert_uint( data->Local1.Capacity, ==, 2 );
	mst_assert_uint( data->Local1.Length,   ==, 0 );
	mst_assert_uint( data->Local1.ItemSize, ==, (sizeof *data->Local1.Items) );

	return MSEC_OK;
}

   
                                                        
                                                                                              
                                                            
                                                                                                           
   
int mst_array_base_insert( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;
	MS_ARRAY         *array;
	int               ercode;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Local1.Items );
	array = &data->Local1;

	                                                                      
	array->FuncIncrease = NULL;

	                            
	ercode = ms_array_push( array, &LIST[0] );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 1 );
	mst_assert_uint( array->Capacity, ==, 2 );

	                         
	ercode = ms_array_insert( array, 0, &LIST[1] );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 2 );
	mst_assert_uint( array->Capacity, ==, 2 );

	                                                                                      
	ercode = ms_array_insert( array, 1, &LIST[2] );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 3 );
	mst_assert_uint( array->Capacity, ==, 3 );

	                                                                  
	ercode = ms_array_insert( array, 1, &LIST[3] );
	mst_assert( ercode == MSEC_OK );
	mst_assert_uint( array->Length,   ==, 4 );
	mst_assert_uint( array->Capacity, ==, 4 );

	                                                                                   
	ercode = ms_array_insert( array, 6, &LIST[1] );
	mst_assert( ercode == MSEC_OUT_OF_RANGE );
	mst_assert_uint( array->Length,   ==, 4 );
	mst_assert_uint( array->Capacity, ==, 4 );

	                                                            
	mst_assert( array->Items[0] == &LIST[1] );
	mst_assert( array->Items[1] == &LIST[3] );
	mst_assert( array->Items[2] == &LIST[2] );
	mst_assert( array->Items[3] == &LIST[0] );

	return MSEC_OK;
}

   
                                                                
                                                                                                           
                                                            
                                                                                                           
   
int mst_array_base_copy_return( MST_FUNCTION *info )
{
	MSTST_ARRAY_DATA *data;
	MS_ARRAY         *array1, *array2;
	size_t            iter;

	mst_prepare( info );
	data = info->Data;
	mst_assert( data->Local1.Items );
	mst_assert( data->Local2.Items );
	array1 = &data->Local1;

	                                           
	ms_array_free( &data->Local2 );
	mst_assert( !data->Local2.Items );

	data->Local2 = ms_array_copy_return( array1 );
	mst_assert( data->Local2.Items );
	array2 = &data->Local2;

	mst_assert_uint( array1->Capacity, ==, array2->Capacity );
	mst_assert_uint( array1->Length,   ==, array2->Length );

	                                                                               
                                      
	mst_assert( array1->Destroy == array2->Destroy );
	mst_assert( array1->Items != array2->Items );

	                                          
	for( iter = 0; iter < array1->Length; ++iter )
		mst_assert( ms_array_get(array1, int, iter) == ms_array_get(array2, int, iter) );

	mst_assert( data->Pointer1->Items );
	ms_array_free( data->Pointer1 );

	                                                
	data->Pointer1 = ms_array_copy_alloc( array1 );

	                               
	ms_array_free( array2 );
	mst_assert( !array2->Items );
	mst_assert_uint( array2->Length, ==, 0 );

	                          
	data->Local2 = ms_array_copy_return( data->Pointer1 );
	mst_assert( data->Local2.Items );
	array2 = &data->Local2;

	                                        
	mst_assert( data->Pointer1->Destroy != array2->Destroy );

	return MSEC_OK;
}

  
                                                                                                                      
                                                                                                                  
                     
                                                                                                                  
                                                                                                                      
  

   
                              
                                                                
                                                                
   
#define FUNC_DESC_01 "                                                 "
#define FUNC_DESC_02 "                                                   "
#define FUNC_DESC_03 "                                                      "
#define FUNC_DESC_04 "                                                       "
#define FUNC_DESC_05 "                                              "
#define FUNC_DESC_06 "                                                   "
#define FUNC_DESC_07 "                                                            "
#define FUNC_DESC_08 "                                                                    "
#define FUNC_DESC_09 "                                              "
#define FUNC_DESC_10 "                                                       "
#define FUNC_DESC_11 "                                                      "
#define FUNC_DESC_12 "                                                "
#define FUNC_DESC_13 "                                       "
#define FUNC_DESC_14 "                                                                "
#define FUNC_DESC_15 "                                                      "

   
                                     
                                                                
                                                                                 
                                             
   
                                                                                  
                                      
   
MST_FUNCTION MSV_ArraySuiteFunctions[] =
{
	{ MST_STRINGIFY(mst_array_create),             FUNC_DESC_01, NULL },
	{ MST_STRINGIFY(mst_array_destroy),            FUNC_DESC_02, NULL },
	{ MST_STRINGIFY(mst_array_realloc),            FUNC_DESC_03, NULL },
	{ MST_STRINGIFY(mst_array_realloc_min),        FUNC_DESC_04, NULL },
	{ MST_STRINGIFY(mst_array_insert_value),       FUNC_DESC_05, NULL },
	{ MST_STRINGIFY(mst_array_insert_values),      FUNC_DESC_06, NULL },
	{ MST_STRINGIFY(mst_array_join_slice),         FUNC_DESC_07, NULL },
	{ MST_STRINGIFY(mst_array_join_slice_inverse), FUNC_DESC_08, NULL },
	{ MST_STRINGIFY(mst_array_copy),               FUNC_DESC_09, NULL },
	{ MST_STRINGIFY(mst_array_slice),              FUNC_DESC_10, NULL },
	{ MST_STRINGIFY(mst_array_remove_range),       FUNC_DESC_11, NULL },
	{ MST_STRINGIFY(mst_array_remove),             FUNC_DESC_12, NULL },
	{ MST_STRINGIFY(mst_array_base_return),        FUNC_DESC_13, NULL },
	{ MST_STRINGIFY(mst_array_base_insert),        FUNC_DESC_14, NULL },
	{ MST_STRINGIFY(mst_array_base_copy_return),   FUNC_DESC_15, NULL },
	{ MST_LASTRECORD }
};

   
                                      
                                                                            
   
MST_SUITE MSV_ArraySuite =
{
	"                ",
	TRUE,
	NULL,
	mst_array_teardown,
	NULL,
	MSV_ArraySuiteFunctions
};

                                                                         
#ifndef MST_ALL_SUITES

	   
                                                                    
                                                                                            
    
                                                               
                                                                    
    
                                        
    
	int main( int argc, char **argv )
	{
		MSTST_ARRAY_DATA data = { NULL, NULL };
		
		IGVAR argc;
		IGVAR argv;

		                             
		MSV_ArraySuite.Data = &data;

		return mst_run_suite( &MSV_ArraySuite );
	}

#endif

                            
                     
        

                                

                              
                          
	int xacv() {
		return 4;                
	}

        -:    0:Source:../../inc/mstest.h
        -:    0:Programs:4
        -:    1:/*
        -:    2: *  Moss Library >>> http://moss.aculo.pl
        -:    3: *
        -:    4: *     /'\_/`\                           
        -:    5: *    /\      \    ___     ____    ____  
        -:    6: *    \ \ \__\ \  / __`\  /',__\  /',__\ 
        -:    7: *     \ \ \_/\ \/\ \L\ \/\__, `\/\__, `\
        -:    8: *      \ \_\\ \_\ \____/\/\____/\/\____/
        -:    9: *       \/_/ \/_/\/___/  \/___/  \/___/ 
        -:   10: *
        -:   11: *  Header for Unit Test module...
        -:   12: *
        -:   13: *  This file is part of Moss Library
        -:   14: *  Copyright (c) by sobiemir <sobiemir@aculo.pl>
        -:   15: *
        -:   16: *  This program is free software: you can redistribute it and/or modify
        -:   17: *  it under the terms of the GNU General Public License as published by
        -:   18: *  the Free Software Foundation, either version 3 of the License, or
        -:   19: *  (at your option) any later version.
        -:   20: *
        -:   21: *  This program is distributed in the hope that it will be useful,
        -:   22: *  but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   23: *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   24: *  GNU General Public License for more details.
        -:   25: *
        -:   26: *  You should have received a copy of the GNU General Public License
        -:   27: *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   28: */
        -:   29:
        -:   30:#ifndef __MSH_MSTEST__
        -:   31:#define __MSH_MSTEST__
        -:   32:
        -:   33:#include <msconf.h>
        -:   34:#include <limits.h>
        -:   35:#include <stdlib.h>
        -:   36:#include <stdio.h>
        -:   37:#include <stdint.h>
        -:   38:
        -:   39:/* ================================================================================================================== */
        -:   40:
        -:   41:/**
        -:   42: * Alias do wartości NULL.
        -:   43: * Makro używane w testach w przypadku gdy funkcja nie zwraca żadnej wiadomości,
        -:   44: * a więc z definicji jest poprawna, gdyż każde makro zostało wywołane poprawnie.
        -:   45: */
        -:   46:#define MST_SUCCESS NULL
        -:   47:
        -:   48:/* wstawia do tablicy funkcję i zamienia jej nazwę na ciąg znaków */
        -:   49:#define MST_TFSTRINGIFY(X) X, STRINGIFY(X)
        -:   50:
        -:   51:/* inicjalizacja ostatniego rekordu tablicy funkcji testw */
        -:   52:#define MST_TFLASTRECORD NULL, NULL, NULL, NULL, 0
        -:   53:
        -:   54:/* ================================================================================================================== */
        -:   55:
        -:   56:/**
        -:   57: * Struktura zawierająca informacje o funkcji testowej.
        -:   58: * Część z tych pól jest obowiązkowa, część opcjonalna, a część uzupełniana automatycznie.
        -:   59: * Szczegóły dostępne w opisach poszczególnych pól.
        -:   60: */
        -:   61:typedef struct MSST_TESTFUNCT
        -:   62:{
        -:   63:	/**
        -:   64:	 * Funkcja testująca.
        -:   65:	 * Uruchamiana przez funkcję mst_run_test.
        -:   66:	 * W trakcie wystąpienia błędu w funkcji, powinna ona zwrócić jego treść.
        -:   67:	 * Pole to jest obowiązkowe.
        -:   68:	 * 
        -:   69:	 * @param  info Struktura funkcji testującej.
        -:   70:	 * @return      Treść błędu lub NULL.
        -:   71:	 */
        -:   72:	int (*Function)(struct MSST_TESTFUNCT *info);
        -:   73:
        -:   74:	/**
        -:   75:	 * Nazwa testu, wyświetlana w konsoli.
        -:   76:	 * Nazwy pozwalają na łatwą identyfikację testu wśród innych.
        -:   77:	 * Pole to jest obowiązkowe.
        -:   78:	 */
        -:   79:	char *Name;
        -:   80:
        -:   81:	/**
        -:   82:	 * Opis testu.
        -:   83:	 * Pod nazwą testu wyświetlany jest opis dla szybkiego przypomnienia, co dany test robi.
        -:   84:	 * Jest to dosyć wygodna funkcjonalność, jednak pole to nie jest obowiązkowe.
        -:   85:	 */
        -:   86:	char *Desc; 
        -:   87:
        -:   88:	/**
        -:   89:	 * Dane, wykorzystywane przez funkcję.
        -:   90:	 * Generalnie funkcja może z nich korzystać, ale nie musi.
        -:   91:	 * Dostępne są z poziomu struktury przekazywanej jako argument funkcji.
        -:   92:	 * Pole to nie jest obowiązkowe.
        -:   93:	 */
        -:   94:	void *Data;
        -:   95:
        -:   96:	/**
        -:   97:	 * Ilość asercji, która została wykonana poprawnie.
        -:   98:	 * W przypadku funkcji, która zakończyła się sukcesem, jest to również ilość wywołań wszystkich
        -:   99:	 * makr z rodziny mst_assert w danej funkcji podczas testowania.
        -:  100:	 * Wartość tego pola jest uzupełniana automatycznie z poziomu funkcji testującej.
        -:  101:	 */
        -:  102:	size_t PassedAsserts;
        -:  103:
        -:  104:	char *ErrorMessage;
        -:  105:}
        -:  106:MST_TESTFUNC;
        -:  107:
        -:  108:/**
        -:  109: * Struktura zawierająca informacje o zestawie funkcji testujących dany moduł.
        -:  110: * Ułatwia grupowanie funkcji, dzięki czemu ich identyfikacja w konsoli jest znacznie przyjemniejsza.
        -:  111: * Struktura zawiera również wskaźniki na funkcje, które mogą być uruchomione przed uruchomieniem
        -:  112: * funkcji testujących, aby przygotować dane, oraz zaraz po ich zakończeniu, aby dane usunąć z pamięci.
        -:  113: */
        -:  114:typedef struct MSST_TESTSUITE
        -:  115:{
        -:  116:	/**
        -:  117:	 * Opis zestawu funkcji.
        -:  118:	 * Wyświetlany jest w konsoli przed uruchomieniem jakiejkolwiek funkcji z zestawu.
        -:  119:	 * Pole jest obowiązkowe.
        -:  120:	 */
        -:  121:	char *Desc;
        -:  122:
        -:  123:	/**
        -:  124:	 * Przerwanie serii testów w przypadku błędu.
        -:  125:	 * W przypadku gdy pole to jest ustawione na wartość TRUE i jakakolwiek funkcja z zestawu zwróci w trakcie
        -:  126:	 * działania błąd, przetwarzanie zestawu zostanie przerwane i dalsze funkcje testujące nie będą wywoływane.
        -:  127:	 * Przydaje się to w trakcie, gdy jedna funkcja zależy od drugiej.
        -:  128:	 * Pole jest obowiązkowe.
        -:  129:	 */
        -:  130:	bool BreakOnError;
        -:  131:
        -:  132:	/**
        -:  133:	 * Funkcja wywoływana przed rozpoczęciem testów.
        -:  134:	 * Idelna dla przygotowania danych potrzebnych dla testów.
        -:  135:	 * Pole nie jest obowiązkowe.
        -:  136:	 * 
        -:  137:	 * @param info Zbiór, w którym znajduje się funkcja.
        -:  138:	 */
        -:  139:	int (*Setup)(struct MSST_TESTSUITE *info);
        -:  140:
        -:  141:	/**
        -:  142:	 * Funkcja wywoływana zaraz po zakończeniu testów.
        -:  143:	 * Idelna dla zwalniania pamięci po danych przydzielonych na potrzeby testu.
        -:  144:	 * Pole nie jest obowiązkowe.
        -:  145:	 * 
        -:  146:	 * @param info Zbiór, w którym znajduje się funkcja.
        -:  147:	 */
        -:  148:	void (*TearDown)(struct MSST_TESTSUITE *info);
        -:  149:
        -:  150:	/**
        -:  151:	 * Dane globalne dla zbioru.
        -:  152:	 * Dane są przekazywane do funkcji w przypadku gdy nie ma własnych.
        -:  153:	 * Pole nie jest obowiązkowe.
        -:  154:	 */
        -:  155:	void *Data;
        -:  156:
        -:  157:	/**
        -:  158:	 * Lista struktur zawierających informacje o funkcjach testowych.
        -:  159:	 * Ostatni element tej listy powinien mieć wszystkie wartości równe ZERO.
        -:  160:	 * Dla tego celu zostało utworzone makro MST_TFLASTRECORD, które można podać jako ostatni element tablicy.
        -:  161:	 * Funkcje testowe wywoływane są po kolei.
        -:  162:	 * Pole jest obowiązkowe.
        -:  163:	 */
        -:  164:	MST_TESTFUNC *Tests;
        -:  165:}
        -:  166:MST_TESTSUITE;
        -:  167:
        -:  168:/* ================================================================================================================== */
        -:  169:
        -:  170:/**
        -:  171: * Sprawdza czy podane wyrażenie jest prawdą.
        -:  172: * Jeżeli wyrażenie jest prawdą, zwiększa licznik poprawnych asercji.
        -:  173: * W przeciwnym wypadku makro wychodzi z funkcji, zwracając treść błędu.
        -:  174: * Błąd formowany jest względem asercji oraz nazwy pliku i linii w którym wystąpił.
        -:  175: * 
        -:  176: * @param  Wyrażenie do sprawdzenia.
        -:  177: * @return Treść błędu w przypadku gdy wyrażenie jest fałszywe.
        -:  178: */
        -:  179:#define mst_assert(exp) \
        -:  180:	if( exp ) \
        -:  181:		info->PassedAsserts++; \
        -:  182:	else \
        -:  183:		return \
        -:  184:			TERMCOLORMAGNETA("#") " Error in " TERMCOLORYELLOW(__FILE__) " on line " \
        -:  185:				TERMCOLORBLUE(DBLSTRINGIFY(__LINE__)) "\n" \
        -:  186:			TERMCOLORMAGNETA("#") " " STRINGIFY(exp)
        -:  187:
        -:  188:#define mst_prepare(teststr) \
        -:  189:	MST_TESTFUNC *_TestFunc_ = teststr; \
        -:  190:	mst_assert( teststr )
        -:  191:
        -:  192:#define mst_assert_s(left, compare, right) \
        -:  193:	if( left compare right ) \
        -:  194:		_TestFunc_->PassedAsserts++; \
        -:  195:	else if( sizeof(left) > sizeof(right) ) \
        -:  196:		sizeof(left) <= sizeof(int) \
        -:  197:			? mst_report_int(_TestFunc_, EXPRESSIONMAKE(left, compare, right), \
        -:  198:				__FILE__, __LINE__, left, right) \
        -:  199:			: sizeof(left) <= sizeof(long) \
        -:  200:				? mst_report_long(_TestFunc_, EXPRESSIONMAKE(left, compare, right), \
        -:  201:					__FILE__, __LINE__, left, right) \
        -:  202:				: mst_report_llong(_TestFunc_, EXPRESSIONMAKE(left, compare, right), \
        -:  203:					__FILE__, __LINE__, left, right); \
        -:  204:	else \
        -:  205:		sizeof(right) <= sizeof(int) \
        -:  206:			? mst_report_int(_TestFunc_, EXPRESSIONMAKE(left, compare, right), \
        -:  207:				__FILE__, __LINE__, left, right) \
        -:  208:			: sizeof(right) <= sizeof(long) \
        -:  209:				? mst_report_long(_TestFunc_, EXPRESSIONMAKE(left, compare, right), \
        -:  210:					__FILE__, __LINE__, left, right) \
        -:  211:				: mst_report_llong(_TestFunc_, EXPRESSIONMAKE(left, compare, right), \
        -:  212:					__FILE__, __LINE__, left, right)
        -:  213:
        -:  214:#define mst_assert_u()
        -:  215:
        -:  216:INLINE static int ms_test_report( MST_TESTFUNC *func, char *exp, char *file, int line )
        -:  217:{
        -:  218:	return MSEC_ABORT;
        -:  219:}
        -:  220:
        -:  221:INLINE static int mst_report_int( MST_TESTFUNC *func, char *exp, char *file, int line, int a,  int b  )
        -:  222:{
        -:  223:	char tpl[] =
        -:  224:		TERMCOLORMAGNETA("#") " Error in " TERMCOLORYELLOW("%s") " on line " TERMCOLORBLUE("%d") "\n" \
        -:  225:		TERMCOLORMAGNETA("#") " %s\n" \
        -:  226:		TERMCOLORMAGNETA("#") " " TERMCOLORBLUE("Where") ": L = %d " TERMCOLORBLUE("and") " R = %d\n";
        -:  227:
        -:  228:	if( func->ErrorMessage )
        -:  229:		return MSEC_INVALID_ARGUMENT;
        -:  230:
        -:  231:	func->ErrorMessage = malloc( sizeof(char) * (sizeof tpl
        -:  232:		+ strlen(exp)
        -:  233:		+ strlen(file)
        -:  234:		+ ESTIMATEDINTSIZE(int)
        -:  235:		+ ESTIMATEDINTSIZE(int)
        -:  236:		+ ESTIMATEDINTSIZE(int)) );
        -:  237:
        -:  238:	return MSEC_ABORT;
        -:  239:}
        -:  240:
        -:  241:INLINE static int mst_report_long( MST_TESTFUNC *func, char *exp, char *file, char *line, long a,  long b  )
        -:  242:{
        -:  243:	return MSEC_ABORT;
        -:  244:}
        -:  245:
        -:  246:INLINE static int mst_report_llong( MST_TESTFUNC *func, char *exp, char *file, char *line, llong a,  llong b  )
        -:  247:{
        -:  248:	return MSEC_ABORT;
        -:  249:}
        -:  250:
        -:  251:/**
        -:  252: * Uruchamia podany w argumencie test.
        -:  253: * Podczas uruchamiania wyświetla komunikaty w konsoli.
        -:  254: * 
        -:  255: * @param  func    Struktura zawierająca funkcję testu do uruchomienia.
        -:  256: * @param  current Indeks aktualnego testu (informacyjnie), 0 gdy brak.
        -:  257: * @param  count   Ilość wszystkich testów (informacyjnie), 0 gdy brak.
        -:  258: * @return         Gdy w funkcji wystąpił błąd, zwraca wartość różną od 0.
        -:  259: */
        1:  260:INLINE static int mst_run_test( MST_TESTFUNC *func, size_t current, size_t count )
        -:  261:{
        -:  262:	char *message;
        -:  263:
        1:  264:	assert( func );
        1:  265:	assert( func->Name );
        1:  266:	assert( func->Function );
        -:  267:
        1:  268:	func->PassedAsserts = 0;
        -:  269:
        -:  270:	/* nazwa testu i numer */
        1:  271:	if( current == 0 || count == 0 )
    #####:  272:		IGRET printf( "-------------------------------------------------------------------------------\n" );
        -:  273:	else
        1:  274:		IGRET printf( "--------------------------------------------------------------------- ["
        -:  275:			TERMCOLORMAGNETA("%03" PFSIZET "/%03" PFSIZET) "]\n", current, count );
        1:  276:	IGRET printf( "[" TERMCOLORCYAN("TEST") "] %s\n", func->Name );
        -:  277:
        -:  278:	/* opis testu */
        1:  279:	if( func->Desc )
        1:  280:		IGRET printf( "[" TERMCOLORCYAN("DESC") "] %s\n", func->Desc );
        -:  281:
        -:  282:	/* wywołaj funkcję */
        1:  283:	message = func->Function( func );
        -:  284:
        -:  285:	/* wypisz rezultat */
        1:  286:	if( message )
    #####:  287:		IGRET printf( "[" TERMCOLORCYAN("STAT") "] " TERMCOLORRED("FAILED!") " > Passed asserts: %" PFSIZET "\n",
        -:  288:			func->PassedAsserts );
        -:  289:	else
        1:  290:		IGRET printf( "[" TERMCOLORCYAN("STAT") "] " TERMCOLORGREEN("SUCCESS!") " > Passed asserts: %" PFSIZET "\n",
        -:  291:			func->PassedAsserts );
        -:  292:
        -:  293:	/* wyświetl błędy w przypadku gdy funkcja została zakończona niepowodzeniem */
        1:  294:	if( message )
        -:  295:		/* tu jest w porządku, printf zawsze coś wypisze więc zawsze coś zwróci
        -:  296:		 * nawet w przypadku błędu zwrócona zostanie wartość ujemna */
    #####:  297:		return printf( "------\n" ),
        -:  298:		       printf( "%s\n", message );
        -:  299:
        1:  300:	return 0;
        -:  301:}
        -:  302:
        -:  303:/**
        -:  304: * Uruchamia podany w argumencie zestaw testów.
        -:  305: * Testy uruchamiane są jeden po drugim, przy czym w przypadku błędu można przerwać je wszystkie.
        -:  306: * Dane przekazywane do zestawu traktowane są jako dane zapasowe.
        -:  307: * W przypadku gdy test nie posiada danych, do jego funkcji przekazywane są dane z zestawu.
        -:  308: * 
        -:  309: * @param  suite 
        -:  310: * @return       Gdy w funkcji wystąpił błąd, zwraca wartość różną od 0.
        -:  311: */
        1:  312:INLINE static int mst_run_suite( MST_TESTSUITE *suite )
        -:  313:{
        -:  314:	MST_TESTFUNC *tests;
        1:  315:	size_t        ammount = 0;
        1:  316:	size_t        current = 1;
        1:  317:	int           error   = 0;
        -:  318:
        1:  319:	assert( suite );
        1:  320:	assert( suite->Tests );
        1:  321:	assert( suite->Desc );
        -:  322:
        1:  323:	tests = suite->Tests;
        -:  324:
        -:  325:	/* oblicz ilość wszystkich testów */
        3:  326:	while( (tests++)->Function )
        1:  327:		ammount++;
        -:  328:
        1:  329:	tests = suite->Tests;
        -:  330:
        -:  331:	/* inicjalizacja */
        1:  332:	if( suite->Setup )
    #####:  333:		if( (error = suite->Setup(suite)) != 0 )
    #####:  334:			return error;
        -:  335:
        1:  336:	IGRET printf( "===============================================================================\n" );
        1:  337:	IGRET printf( "%s\n", suite->Desc );
        -:  338:
        1:  339:	while( tests->Function )
        -:  340:	{
        -:  341:		/* przypisz domyślne dane jeżeli ich nie podano */
        1:  342:		if( tests->Data == NULL )
        1:  343:			tests->Data = suite->Data;
        -:  344:
        -:  345:		/* przerwij działanie funkcji w przypadku błędu tylko wtedy, gdy takie zachowanie zostało ustalone */
        1:  346:		if( (error |= mst_run_test(tests++, current++, ammount)) && suite->BreakOnError )
    #####:  347:			break;
        -:  348:	}
        1:  349:	IGRET printf( "===============================================================================\n" );
        -:  350:
        -:  351:	/* zakończenie */
        1:  352:	if( suite->TearDown )
        1:  353:		suite->TearDown( suite );
        -:  354:
        1:  355:	return error;
        -:  356:}
        -:  357:
        -:  358:#endif

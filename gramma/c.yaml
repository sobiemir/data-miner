# Stałe predefiniowane używane podczas pobierania symboli
PREDEFINED:
    MSD_HASH_MBS_FUNCTIONS: null
    MSD_HASH_WCS_FUNCTIONS: null

    MSD_HASH_MURMUR: null
    MSD_HASH_JOAAT:  null
    MSD_HASH_FNV:    null
    MSD_HASH_SDBM:   null
    MSD_HASH_DJB:    null
    MSD_HASH_XXHASH: null

    IGRET: null
    IGVAR: null

    MSD_SYSTEM_LINUX:  null
    MSD_COMPILER_GNUC: null

    INLINE: inline

    "TEST_PREDEFINED(_x,_y)": "ms_{:_x}_get_{:_y}"

# Lista zmiennych dostępnych podczas działania parsera
VARIABLES: null

# Nazwa punktu wejściowego
START: ENTRY

# Kroki według których parsowany będzie plik
STEPS:

    # Punkt wejściowy
    ENTRY:
        - ___
            - LOOP
            - PREPARE_TEXT
        - ___
            - REWIND
            - 0

    # Przygotowywanie tekstu pod parsowanie
    PREPARE_TEXT:
        - ___
            - SEEK_UNTIL_ONE_OF
            -    / : FALSE
                '"': FALSE
                "'": FALSE
            - FALSE
        - ___
            - CHAR_CHECK
            -    / : COMMENT
                '"': SKIP_CONTENT_DOUBLE
                "'": SKIP_CONTENT_SINGLE
            - FALSE

    # Usuwa ciągi znaków zapisane w apostrofie
    SKIP_CONTENT_DOUBLE:
        - ___
            - REPLACE_UNTIL_ESCAPE
            - '"'
            - " "
            - TRUE
            - \
    
    # Usuwa ciągi znaków zapisane w apostrofie
    SKIP_CONTENT_SINGLE:
        - ___
            - REPLACE_UNTIL_ESCAPE
            - "'"
            - " "
            - TRUE
            - \

    # Wykrywa typ komentarza
    COMMENT:
        - ___
            - CHAR
            -    / : COMMENT_LINE_START
                '*': COMMENT_BLOCK_START
            - FALSE

    # Początek komentarza blokowego
    COMMENT_BLOCK_START:
        - ___
            - GROUP
            - COMMENT_BLOCK
        - ___
            - SEEK
            - -2
        - ___
            - REPLACE_MANY
            - 2
            - " "
            - FALSE
        - ___
            - EXECUTE
            - COMMENT_BLOCK
        - ___
            - GROUP
            - FALSE

    # Komentarz blokowy
    COMMENT_BLOCK:
        - ___
            - REPLACE_UNTIL_ONE_OF
            -   "\n" : FALSE
                "*" :  FALSE
            - " "
            - TRUE
        - ___
            - NEXT
            - "*"
            - COMMENT_BLOCK_END_PREPARE
            - FALSE
        - ___
            - SEEK_GET
            - 1
        - ___
            - EXECUTE
            - COMMENT_BLOCK

    # Przygotowanie do zakończenia komentarza blokowego
    COMMENT_BLOCK_END_PREPARE:
        - ___
            - NEXT
            - /
            - COMMENT_BLOCK_END
            - FALSE
        - ___
            - SEEK
            - -1
        - ___
            - REPLACE
            - " "
            - TRUE
        - ___
            - EXECUTE
            - COMMENT_BLOCK

    # 
    # Zakończenie komentarza blokowego.
    # Podczas zakończenia komentarza blokowego parser musi wyczyścić jego zakończenie, czyli */.
    # Po wykonaniu tego, reguła wraca do reguły z której została wywołana.
    # ---------------------------------------------------------------------------------------------
    COMMENT_BLOCK_END:
        - ___
            - SEEK
            - -2
        - ___
            - REPLACE_MANY
            - 2
            - " "
            - FALSE

    # 
    # Rozpoczęcie komentarza liniowego.
    # Po wykryciu komentarza parser musi wyczyścić również sam początek, czyli znaki //.
    # Po wykonaniu tej czynnności, przechodzi do kroku głównego pobierania komentarza.
    # ---------------------------------------------------------------------------------------------
    COMMENT_LINE_START:
        - ___
            - GROUP
            - COMMENT_LINE
        - ___
            - SEEK
            - -1
        - ___
            - REPLACE
            - " "
            - FALSE
        - ___
            - EXECUTE
            - COMMENT_LINE
        - ___
            - GROUP
            - FALSE

    # 
    # Kontynuacja komentarza liniowego po znaku ucieczki (wieloliniowy komentarz liniowy)
    # Jest to możliwe dzięki zastosowaniu takiego sposobu:
    #
    # // komentarz liniowy \
    #    jednak w dwóch liniach
    #
    # Taki komentarz, choć w wielu liniach, traktowany będzie nadal jako liniowy.
    # ---------------------------------------------------------------------------------------------
    COMMENT_LINE_CONTINUE:
        - ___
            - SEEK
            - -1
        - ___
            - WRITE_FROM_STREAM
        - ___
            - EXECUTE
            - COMMENT_LINE

    # 
    # Komentarz liniowy.
    # Szuka znaku końca linii lub znaku ucieczki, pobierając komentarz do grupy i zamieniając go
    # pustymi znakami.
    # Wyszukuje tylko linuksowych znaków końca linii.
    # ---------------------------------------------------------------------------------------------
    COMMENT_LINE:
        - ___
            - SEEK
            - -2
        - ___
            - REPLACE
            - " "
            - FALSE
        - ___
            - SEEK
            - 1
        - ___
            - REPLACE_UNTIL_ONE_OF
            -   \  : FALSE
               "\n": FALSE
            - " "
            - TRUE
        - ___
            - NEXT
            - \
            - FALSE
            - ''
        - ___
            - REPLACE
            - " "
            - FALSE
        - ___
            - NEXT
            - "\n"
            - COMMENT_LINE_CONTINUE
            - FALSE
        - ___
            - WRITE
            - \
        - ___
            - EXECUTE
            - COMMENT_LINE

    CAPTURE_DATA:
        - ___
            - WHITESPACE_ESCAPE

